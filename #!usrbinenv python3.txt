#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
import time
from geometry_msgs.msg import Twist
from std_msgs.msg import Float32MultiArray

GpsPointLat = 34.863827 #目標地点の緯度
GpsPointLng = 135.197418 #目標地点の経度

prevLat = 999
prevLng = 999

distanceLat = 0
distanceLng = 0

def stop_motor(pub):
    rospy.loginfo("Stopping motor...")
    twist = Twist()
    twist.linear.x = 0
    twist.angular.z = 0
    pub.publish(twist) # モーターの停止命令を送信

def callback(data):
    global distanceLat, distanceLng, prevLat, prevLng
    distanceLat = abs(GpsPointLat - data.data[0])
    distanceLng = abs(GpsPointLng - data.data[1])

    if prevLat == 999 and prevLng == 999:
        prevLat = data.data[0]
        prevLng = data.data[1]

        if distanceLat > 0.00001 or distanceLng > 0.00001:
            prevDistanceLat = distanceLat
            prevDistanceLng = distanceLng
            twist = Twist()
            twist.linear.x = 1
            twist.angular.z = 0
            rospy.loginfo("prevDistanceLat: %f", prevDistanceLat)
            rospy.loginfo("prevDistanceLng: %f", prevDistanceLng)
            pub.publish(twist)
            time.sleep(10)
        else:
            rospy.loginfo("Goal")
            stop_motor(pub)
            rospy.signal_shutdown("Reached the destination")

    else:

        currentDistanceLat = abs(GpsPointLat - data.data[0])
        currentDistanceLng = abs(GpsPointLng - data.data[1])
        rospy.loginfo("currentDistanceLat: %f", currentDistanceLat)
        rospy.loginfo("currentDistanceLng: %f", currentDistanceLng)
        rospy.loginfo("")
        prevDistanceLat = abs(GpsPointLat - prevLat)
        prevDistanceLng = abs(GpsPointLat - prevLng)

        prevLat = 999
        prevLng = 999

        if prevDistanceLat >= currentDistanceLat or prevDistanceLng >= currentDistanceLng:
            twist = Twist()
            twist.linear.x = 0
            twist.angular.z = 1
            pub.publish(twist)
            time.sleep(0.5)

def motor_controller():
    rospy.init_node('motor_controller')
    global pub
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10) # Twist型のメッセージをパブリッシュするためのパブリッシャーを設定
    rospy.on_shutdown(lambda: stop_motor(pub))
    rate = rospy.Rate(50) # 50msc

    rospy.Subscriber('gnss', Float32MultiArray, callback)

    rospy.spin()

if __name__ == '__main__':
    try:
        motor_controller()
    except rospy.ROSInterruptException:
        pass